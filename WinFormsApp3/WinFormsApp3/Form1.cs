namespace WinFormsApp3
{
    public partial class Form1 : Form
    {
        bool index = true;
        Pacman pac = new Pacman("Пакман", 40);
        Blink blink = new Blink("Блінк", 40);

        int indexAnimation = 1;
        Map map = new Map();
        int[,] mas ={
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
            { 1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1 },
            { 1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1 },
            { 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1 },
            { 1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1 },
            { 1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1 },
            { 1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1 },
             { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 }
};
    
    





public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {          
          
            pac.X = 100;
            pac.Y = 40;
            blink.X = 880;
            blink.Y = 880;
            this.Controls.Add(pac.pictureBox);
            this.Controls.Add(blink.pictureBox);
            timer1.Interval = 100;
            timer1.Tick += new EventHandler(update);
            timer1.Start();
            this.KeyDown += new KeyEventHandler(keyboard);
            for (int j = 0; j < 25; j++)
            {   
                Wall wall = new Wall();
                map.walls.Add(wall);
                for (int i = 0; i < 48; i++)
                {
                    if (mas[j, i] == 1)
                    {
                        Brick brick1 = new Brick("brick" + i.ToString(), 40);
                        brick1.X = i * 40;
                        brick1.Y = j * 40;
                        wall.bricks.Add(brick1);
                    }

                }
            }
            foreach (Wall wall in map.walls)
            {
                foreach (Brick brick2 in wall.bricks)
                {
                    this.Controls.Add(brick2.pictureBox);

                }
            }
        }

        private void keyboard(object? sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Right:
                    indexAnimation= 1;
                    break;
                case Keys.Left:
                    indexAnimation = 2;
                    break;
                case Keys.Up:
                    indexAnimation = 3;
                    break;
                case Keys.Down:
                    indexAnimation = 4;
                    break;
            }
        }

        private void update(object? sender, EventArgs e)
        {
            blink.BrickAnimation();
            blink.MoveGreedyAlgorithm(pac, ref blink,map);
            if (indexAnimation == 1)
            {
               pac.PacmanAnimation(1);
                pac.X = pac.X + 8;
                if (pac.collisionRight(pac, map)) { pac.X = pac.X - 8;  }
              
            }
            if (indexAnimation == 2)
            {
                index = true;
                pac.PacmanAnimation(2);
                pac.X = pac.X - 8;
                if (pac.collisionLeft(pac, map)) { pac.X = pac.X + 8; }
            }
            if (indexAnimation == 3)
            {
                index = true;
                pac.PacmanAnimation(3);
                pac.Y = pac.Y - 8;
                
              
                if (pac.collisionUP(pac, map)) { pac.Y = pac.Y + 8; }
            }
            if (indexAnimation == 4)
            {
                index = true;
                pac.PacmanAnimation(4);
                pac.Y = pac.Y + 8;
                if (pac.collisionDown(pac, map)) { pac.Y = pac.Y - 8; }
            }

        }
    }
}